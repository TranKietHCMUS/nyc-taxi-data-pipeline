version: '3.8'
services:
  # Partition leader election, store Kafka configuration's settings,
  # and other metadata (list of brokers, number of partitions, number of
  # replication factors), and reasignment partitions among brokers in case
  # of broker failure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181" # host_port:container_port
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # Client will connect to this port to communicate with zookeeper
      ZOOKEEPER_TICK_TIME: 2000 # Basic time unit for timing (2000 ms)

  # Kafka broker, each broker can be considered as a node
  broker:
    image: confluentinc/cp-server:7.5.0
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      # ID of the broker in a cluster
      KAFKA_BROKER_ID: 1 
      # Connect to Zoo Keeper for distributed coordination and leader election
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # Define how clients connect to brokers
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      # How many copies are maintained for fault tolerance
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # How long a new consumer should wait before participating in a consumer group rebalance
      # we give consumers some 
      # Schema Registry URL for storing and managing Avro schemas
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  # Store Avro schemas for topics to ensure schema compatibility
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      debezium:
        condition: service_healthy
    ports:
      - "9021:9021"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/healthcheck"] # Adjust the URL and options as needed
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'debezium:8083'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      # How many copies for control-center internal topics
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      # Number of partitions for control-center internal topics
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      # CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      # Health check endpoint to monitor status of connectors
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      # How many copies for confluent metrics topics
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1

  # CDC platform to capture changes in DB
  # and stream them to Kafka
  debezium:
    image: debezium/connect:1.9
    container_name: debezium
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      # Set to Avro for higher performance
      # KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      # VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_TOPIC_CREATION_ENABLE: true
    command:
      - bash
      - -c
      - |
        mkdir -p /kafka/connect/jars
        curl -k -SL "https://jdbc.postgresql.org/download/postgresql-42.5.0.jar" -o /kafka/connect/jars/postgresql-42.5.0.jar
        mkdir -p /kafka/connect/jars/jdbc-connector
        curl -k -SL "https://packages.confluent.io/maven/io/confluent/kafka-connect-jdbc/10.7.0/kafka-connect-jdbc-10.7.0.jar" -o /kafka/connect/jars/jdbc-connector/kafka-connect-jdbc-10.7.0.jar
        /docker-entrypoint.sh start

  # Debezium UI
  # debezium-ui:
  #   image: debezium/debezium-ui:latest
  #   container_name: debezium-ui
  #   hostname: debezium-ui
  #   depends_on:
  #     debezium:
  #       condition: service_healthy
  #   ports:
  #     - '8080:8080'
  #   environment:
  #     KAFKA_CONNECT_URIS: http://debezium:8083

  # flink processing
  flink-processing:
    image: kiettna/flink-processing
    container_name: flink-processing
    build:
      context: ./pyflink
      dockerfile: Dockerfile
    ports:
      - "2612:2612"
    depends_on:
      - broker
      - debezium
    volumes:
      - ./pyflink/scripts/flink_processing.py:/app/flink_processing.py
    command: ["python", "flink_processing.py"]
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafana
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "http://localhost:3000/login"]
      interval: 20s
      timeout: 10s
      retries: 5
